import customtkinter as ctk
import threading
from datetime import datetime
from tkinter import messagebox
import logging

logger = logging.getLogger(__name__)


class CameraButtons:
    """Camera control buttons functionality with camera selection"""
    
    def __init__(self, main_app):
        self.app = main_app
        
    def create_camera_controls(self, parent):
        """Create adaptive camera controls with camera selection"""
        cam_controls = ctk.CTkFrame(parent, fg_color="#333333")
        cam_controls.grid(row=2, column=0, sticky="ew", padx=10, pady=(0, 10))
        
        # Configure responsive grid for controls
        cam_controls.grid_columnconfigure(0, weight=1)
        cam_controls.grid_columnconfigure(1, weight=1) 
        cam_controls.grid_columnconfigure(2, weight=1)
        cam_controls.grid_rowconfigure(0, weight=0)  # Camera selection row
        cam_controls.grid_rowconfigure(1, weight=1)  # Control buttons row
        
        # Camera selection section
        self._create_camera_selection(cam_controls)
        
        # Control buttons section
        self._create_control_buttons(cam_controls)
    
    def _create_camera_selection(self, parent):
        """Create camera selection dropdown"""
        selection_frame = ctk.CTkFrame(parent, fg_color="#444444")
        selection_frame.grid(row=0, column=0, columnspan=3, sticky="ew", padx=5, pady=5)
        
        # Configure grid
        selection_frame.grid_columnconfigure(1, weight=1)
        
        # Label
        camera_label = ctk.CTkLabel(
            selection_frame,
            text="üìπ Camera:",
            font=("Arial", 11, "bold"),
            text_color="#00FFFF"
        )
        camera_label.grid(row=0, column=0, padx=(10, 5), pady=8, sticky="w")
        
        # Dropdown for camera selection
        self.app.camera_dropdown = ctk.CTkOptionMenu(
            selection_frame,
            values=self.app.camera_manager.get_camera_list_for_dropdown(),
            command=self._on_camera_selection_changed,
            font=("Arial", 10),
            dropdown_font=("Arial", 10)
        )
        self.app.camera_dropdown.grid(row=0, column=1, padx=5, pady=8, sticky="ew")
        
        # Refresh button
        refresh_btn = ctk.CTkButton(
            selection_frame,
            text="üîÑ",
            command=self._refresh_camera_list,
            width=30,
            height=28,
            fg_color="#666666",
            hover_color="#555555",
            font=("Arial", 12)
        )
        refresh_btn.grid(row=0, column=2, padx=(5, 10), pady=8)
        
        # Set initial selection
        current_cameras = self.app.camera_manager.get_camera_list_for_dropdown()
        if current_cameras:
            self.app.camera_dropdown.set(current_cameras[0])
    
    def _create_control_buttons(self, parent):
        """Create camera control buttons"""
        # Camera control buttons with adaptive sizing
        self.app.camera_btn = ctk.CTkButton(
            parent,
            text="üé• START CAMERA",
            command=self.toggle_camera,
            height=40,
            fg_color="#00AA00",
            hover_color="#008800",
            font=("Arial", 11, "bold")
        )
        self.app.camera_btn.grid(row=1, column=0, padx=5, pady=10, sticky="ew")
        
        self.app.zoom_btn = ctk.CTkButton(
            parent,
            text="üîç QR FOCUS",
            command=self.toggle_qr_focus,
            height=40,
            fg_color="#FF6600",
            hover_color="#CC4400",
            font=("Arial", 10, "bold"),
            state="disabled"
        )
        self.app.zoom_btn.grid(row=1, column=1, padx=5, pady=10, sticky="ew")
        
        self.app.rescan_btn = ctk.CTkButton(
            parent,
            text="üîÑ RESCAN QR",
            command=self.unlock_qr_scan,
            height=40,
            fg_color="#9966FF",
            hover_color="#7744DD",
            font=("Arial", 10, "bold"),
            state="disabled"
        )
        self.app.rescan_btn.grid(row=1, column=2, padx=5, pady=10, sticky="ew")
    
    def _on_camera_selection_changed(self, selection: str):
        """Handle camera selection change"""
        try:
            # Extract camera index from selection (format: "0: Camera Name")
            camera_index = int(selection.split(":")[0])
            
            # Update camera manager
            if self.app.camera_manager.set_camera_index(camera_index):
                timestamp = datetime.now().strftime("%H:%M:%S")
                camera_info = self.app.camera_manager.get_current_camera_info()
                message = f"üìπ [{timestamp}] ƒê√£ ch·ªçn camera: {camera_info}"
                self.app._update_content_log(message, append=True)
                
                # If camera is currently running, restart with new camera
                if self.app.scanning:
                    self.app._update_content_log(f"üîÑ [{timestamp}] ƒêang kh·ªüi ƒë·ªông l·∫°i v·ªõi camera m·ªõi...", append=True)
                    self.stop_scanning()
                    # Delay restart to ensure proper cleanup
                    self.app.root.after(500, self.start_scanning)
            else:
                messagebox.showwarning("C·∫£nh b√°o", f"Kh√¥ng th·ªÉ ch·ªçn camera {camera_index}")
                
        except Exception as e:
            logger.error(f"Error changing camera selection: {e}")
            messagebox.showerror("L·ªói", f"L·ªói khi ch·ªçn camera: {str(e)}")
    
    def _refresh_camera_list(self):
        """Refresh the camera list"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            self.app._update_content_log(f"üîÑ [{timestamp}] ƒêang qu√©t l·∫°i danh s√°ch camera...", append=True)
            
            # Stop camera if running
            was_scanning = self.app.scanning
            if was_scanning:
                self.stop_scanning()
            
            # Refresh camera list
            self.app.camera_manager.refresh_camera_list()
            
            # Update dropdown
            new_camera_list = self.app.camera_manager.get_camera_list_for_dropdown()
            self.app.camera_dropdown.configure(values=new_camera_list)
            
            if new_camera_list:
                self.app.camera_dropdown.set(new_camera_list[0])
                self.app._update_content_log(f"‚úÖ [{timestamp}] T√¨m th·∫•y {len(new_camera_list)} camera", append=True)
            else:
                self.app._update_content_log(f"‚ùå [{timestamp}] Kh√¥ng t√¨m th·∫•y camera n√†o", append=True)
            
            # Restart camera if it was running
            if was_scanning:
                self.app.root.after(1000, self.start_scanning)
                
        except Exception as e:
            logger.error(f"Error refreshing camera list: {e}")
            messagebox.showerror("L·ªói", f"L·ªói khi qu√©t camera: {str(e)}")
    
    def toggle_camera(self):
        """Toggle camera on/off"""
        if not self.app.scanning:
            self.start_scanning()
        else:
            self.stop_scanning()
    
    def start_scanning(self):
        """Start camera and QR scanning with retry mechanism"""
        try:
            self.app.camera_retry_count = 0
            
            # Show current camera info
            camera_info = self.app.camera_manager.get_current_camera_info()
            timestamp = datetime.now().strftime("%H:%M:%S")
            self.app._update_content_log(f"üìπ [{timestamp}] ƒêang kh·ªüi ƒë·ªông camera: {camera_info}", append=True)
            
            if not self.app.camera_manager.start():
                self.handle_camera_error()
                return
            
            self.app.scanning = True
            self.update_scan_ui_state(True)
            
            timestamp = datetime.now().strftime("%H:%M:%S")
            message = f"‚úÖ [{timestamp}] Camera ƒë√£ ƒë∆∞·ª£c m·ªü th√†nh c√¥ng!\nüîç ƒêang t√¨m ki·∫øm m√£ QR code...\nüì± ƒê∆∞a CCCD c√≥ m√£ QR v√†o khung h√¨nh\nüóÑÔ∏è Database search s·∫µn s√†ng!\nüìπ Camera: {camera_info}"
            self.app._update_content_log(message, append=True)
            
            self.app.stop_video_event.clear()
            self.app.video_thread = threading.Thread(target=self.app._video_loop, daemon=True)
            self.app.video_thread.start()
            
        except Exception as e:
            logger.error(f"Failed to start camera: {e}")
            self.handle_camera_error()
    
    def handle_camera_error(self):
        """Handle camera startup errors"""
        self.app.camera_retry_count += 1
        
        camera_info = self.app.camera_manager.get_current_camera_info()
        error_message = f"""‚ùå Kh√¥ng th·ªÉ m·ªü camera {camera_info}! (L·∫ßn th·ª≠ {self.app.camera_retry_count}/{self.app.max_camera_retries})

üîç ƒêang ki·ªÉm tra nguy√™n nh√¢n..."""
        self.app._update_content_log(error_message)
        
        if self.app.camera_retry_count < self.app.max_camera_retries:
            error_detail = f"""
üîß ƒê·ªÄ XU·∫§T KH·∫ÆC PH·ª§C:
1. Th·ª≠ ch·ªçn camera kh√°c t·ª´ dropdown
2. Nh·∫•n n√∫t üîÑ ƒë·ªÉ qu√©t l·∫°i danh s√°ch camera
3. ƒê√≥ng c√°c ·ª©ng d·ª•ng kh√°c (Skype, Zoom, Teams)
4. Nh·∫•n 'KH·∫ÆC PH·ª§C CAMERA' ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt

‚è≥ S·∫Ω t·ª± ƒë·ªông th·ª≠ l·∫°i sau 3 gi√¢y..."""
            self.app._update_content_log(error_detail, append=True)
            self.app.root.after(3000, self.auto_retry_camera)
        else:
            final_error = f"""
‚ùå ƒê√É TH·ª¨ {self.app.max_camera_retries} L·∫¶N NH∆ØNG V·∫™N KH√îNG TH·ªÇ M·ªû CAMERA!

üìã VUI L√íNG TH·ª¨:
1. Ch·ªçn camera kh√°c t·ª´ dropdown
2. Nh·∫•n üîÑ ƒë·ªÉ qu√©t l·∫°i camera
3. Nh·∫•n 'KH·∫ÆC PH·ª§C CAMERA' v√† l√†m theo h∆∞·ªõng d·∫´n
4. Restart m√°y t√≠nh
5. Ch·∫°y ·ª©ng d·ª•ng v·ªõi quy·ªÅn Administrator"""
            self.app._update_content_log(final_error, append=True)
            
            response = messagebox.askyesno(
                "L·ªói Camera",
                f"Kh√¥ng th·ªÉ m·ªü camera {camera_info} sau nhi·ªÅu l·∫ßn th·ª≠.\n\n"
                "B·∫°n c√≥ mu·ªën:\n"
                "‚Ä¢ Th·ª≠ camera kh√°c\n"
                "‚Ä¢ Xem h∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c\n\n"
                "Ch·ªçn Yes ƒë·ªÉ xem h∆∞·ªõng d·∫´n, No ƒë·ªÉ h·ªßy."
            )
            if response:
                from gui.dialogs.camera_fix_dialog import CameraFixDialog
                CameraFixDialog(self.app.root)
    
    def auto_retry_camera(self):
        """Auto retry camera connection"""
        if not self.app.scanning and self.app.camera_retry_count < self.app.max_camera_retries:
            self.start_scanning()
    
    def stop_scanning(self):
        """Stop camera and scanning"""
        self.app.scanning = False
        self.app.stop_video_event.set()
        
        if self.app.video_thread and self.app.video_thread.is_alive():
            self.app.video_thread.join(timeout=1.0)
        
        self.app.camera_manager.stop()
        self.update_scan_ui_state(False)
        
        self.app.cam_panel.configure(
            image="", 
            text="üé• CAMERA READY\n\nCh·ªçn camera t·ª´ dropdown\nClick 'START CAMERA' to begin\n\n‚Ä¢ Adaptive workspace size\n‚Ä¢ Auto-scaling video display\n‚Ä¢ Responsive to window changes\n‚Ä¢ Advanced search database"
        )
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        message = f"üõë [{timestamp}] Camera ƒë√£ ƒë∆∞·ª£c d·ª´ng"
        self.app._update_content_log(message, append=True)
    
    def update_scan_ui_state(self, scanning: bool):
        """Update UI state with modern status indicators"""
        if scanning:
            self.app.camera_btn.configure(
                text="üõë STOP CAMERA", 
                fg_color="#FF3333",
                hover_color="#CC2222"
            )
            self.app.camera_status.configure(
                text="üü¢ ONLINE",
                text_color="#00FF88"
            )
            self.app.status_label.configure(
                text="üü¢ SCANNING",
                text_color="#00FF88"
            )
            
            # Disable camera selection while running
            self.app.camera_dropdown.configure(state="disabled")
            
            # Enable other camera controls
            if hasattr(self.app, 'zoom_btn'):
                self.app.zoom_btn.configure(state="normal")
            if self.app.rescan_btn:
                self.app.rescan_btn.configure(state="normal" if self.app.qr_locked else "disabled")
        else:
            self.app.camera_btn.configure(
                text="üé• START CAMERA", 
                fg_color="#00AA00",
                hover_color="#008800"
            )
            self.app.camera_status.configure(
                text="‚≠ï OFFLINE",
                text_color="#FF6666"
            )
            self.app.status_label.configure(
                text="üî¥ READY",
                text_color="#FF6666"
            )
            
            # Enable camera selection when stopped
            self.app.camera_dropdown.configure(state="normal")
            
            if hasattr(self.app, 'zoom_btn'):
                self.app.zoom_btn.configure(state="disabled")
                self.app.qr_focus_mode = False
                self.app.zoom_btn.configure(
                    text="üîç QR FOCUS",
                    fg_color="#FF6600",
                    hover_color="#CC4400"
                )
            if self.app.rescan_btn:
                self.app.rescan_btn.configure(state="disabled")
    
    def toggle_qr_focus(self):
        """Toggle QR focus mode for better small QR detection"""
        self.app.qr_focus_mode = not self.app.qr_focus_mode
        
        if self.app.qr_focus_mode:
            self.app.zoom_btn.configure(
                text="üîç NORMAL VIEW",
                fg_color="#00FF00",
                hover_color="#00CC00"
            )
            timestamp = datetime.now().strftime("%H:%M:%S")
            message = f"üîç [{timestamp}] Ch·∫ø ƒë·ªô QR Focus: B·∫¨T\nüì± ƒê∆∞a QR code v√†o khung v√†ng ·ªü gi·ªØa m√†n h√¨nh\nüéØ Gi·ªØ camera ·ªïn ƒë·ªãnh ƒë·ªÉ nh·∫≠n di·ªán t·ªët h∆°n"
            self.app._update_content_log(message, append=True)
        else:
            self.app.zoom_btn.configure(
                text="üîç QR FOCUS",
                fg_color="#FF6600",
                hover_color="#CC4400"
            )
            timestamp = datetime.now().strftime("%H:%M:%S")
            message = f"üëÅÔ∏è [{timestamp}] Ch·∫ø ƒë·ªô Normal View: B·∫¨T\nüì∫ Hi·ªÉn th·ªã to√†n b·ªô khung h√¨nh camera"
            self.app._update_content_log(message, append=True)
    
    def unlock_qr_scan(self):
        """Unlock QR scanning to allow new QR detection"""
        self.app.qr_locked = False
        self.app.detected_qrs.clear()  # Clear previous QR data
        
        # Reset data display
        for field in self.app.data_labels:
            self.app.data_labels[field].configure(text="Ch∆∞a c√≥ d·ªØ li·ªáu")
        
        # Reset images
        self.app.front_image = None
        self.app.back_image = None
        
        # Reset capture buttons - Cho ph√©p ch·ª•p l·∫°i
        if self.app.scanning:  # Ch·ªâ enable khi camera ƒëang b·∫≠t
            self.app.front_btn.configure(state="normal", text="üì∏ FRONT")
            self.app.back_btn.configure(state="normal", text="üì∏ BACK")
        
        # Update button states
        self.app.rescan_btn.configure(state="disabled")
        self.app.current_id_info = None
        self.app._check_complete_status()  # This will disable save button if needed
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        message = f"üîÑ [{timestamp}] ƒê√£ m·ªü kh√≥a qu√©t QR - S·∫µn s√†ng qu√©t QR m·ªõi!\nüì± ƒê∆∞a CCCD c√≥ m√£ QR v√†o khung h√¨nh ƒë·ªÉ qu√©t l·∫°i\nüì∏ C√≥ th·ªÉ ch·ª•p ·∫£nh m·∫∑t tr∆∞·ªõc v√† sau l·∫°i"
        self.app._update_content_log(message, append=True)